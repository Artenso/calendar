// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: calendar.proto

package calendar

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Event) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in EventMultiError, or nil if none found.
func (m *Event) ValidateAll() error {
	return m.validate(true)
}

func (m *Event) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EventValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}

	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.ValidateAll() if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on AddEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEventRequestMultiError, or nil if none found.
func (m *AddEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetStartDate() == nil {
		err := AddEventRequestValidationError{
			field:  "StartDate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndDate() == nil {
		err := AddEventRequestValidationError{
			field:  "EndDate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) < 5 {
		err := AddEventRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 5 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddEventRequestMultiError(errors)
	}

	return nil
}

// AddEventRequestMultiError is an error wrapping multiple validation errors
// returned by AddEventRequest.ValidateAll() if the designated constraints
// aren't met.
type AddEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEventRequestMultiError) AllErrors() []error { return m }

// AddEventRequestValidationError is the validation error returned by
// AddEventRequest.Validate if the designated constraints aren't met.
type AddEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEventRequestValidationError) ErrorName() string { return "AddEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEventRequestValidationError{}

// Validate checks the field values on AddEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddEventResponseMultiError, or nil if none found.
func (m *AddEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddEventResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddEventResponseMultiError(errors)
	}

	return nil
}

// AddEventResponseMultiError is an error wrapping multiple validation errors
// returned by AddEventResponse.ValidateAll() if the designated constraints
// aren't met.
type AddEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddEventResponseMultiError) AllErrors() []error { return m }

// AddEventResponseValidationError is the validation error returned by
// AddEventResponse.Validate if the designated constraints aren't met.
type AddEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddEventResponseValidationError) ErrorName() string { return "AddEventResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddEventResponseValidationError{}

// Validate checks the field values on GetEventByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventByIDRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventByIDRequestMultiError, or nil if none found.
func (m *GetEventByIDRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventByIDRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := GetEventByIDRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetEventByIDRequestMultiError(errors)
	}

	return nil
}

// GetEventByIDRequestMultiError is an error wrapping multiple validation
// errors returned by GetEventByIDRequest.ValidateAll() if the designated
// constraints aren't met.
type GetEventByIDRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventByIDRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventByIDRequestMultiError) AllErrors() []error { return m }

// GetEventByIDRequestValidationError is the validation error returned by
// GetEventByIDRequest.Validate if the designated constraints aren't met.
type GetEventByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDRequestValidationError) ErrorName() string {
	return "GetEventByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDRequestValidationError{}

// Validate checks the field values on GetEventByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetEventByIDResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetEventByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetEventByIDResponseMultiError, or nil if none found.
func (m *GetEventByIDResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetEventByIDResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetEventByIDResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetEventByIDResponseValidationError{
					field:  "Event",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventByIDResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetEventByIDResponseMultiError(errors)
	}

	return nil
}

// GetEventByIDResponseMultiError is an error wrapping multiple validation
// errors returned by GetEventByIDResponse.ValidateAll() if the designated
// constraints aren't met.
type GetEventByIDResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetEventByIDResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetEventByIDResponseMultiError) AllErrors() []error { return m }

// GetEventByIDResponseValidationError is the validation error returned by
// GetEventByIDResponse.Validate if the designated constraints aren't met.
type GetEventByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventByIDResponseValidationError) ErrorName() string {
	return "GetEventByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetEventByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventByIDResponseValidationError{}

// Validate checks the field values on RemoveEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveEventRequestMultiError, or nil if none found.
func (m *RemoveEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := RemoveEventRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveEventRequestMultiError(errors)
	}

	return nil
}

// RemoveEventRequestMultiError is an error wrapping multiple validation errors
// returned by RemoveEventRequest.ValidateAll() if the designated constraints
// aren't met.
type RemoveEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveEventRequestMultiError) AllErrors() []error { return m }

// RemoveEventRequestValidationError is the validation error returned by
// RemoveEventRequest.Validate if the designated constraints aren't met.
type RemoveEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveEventRequestValidationError) ErrorName() string {
	return "RemoveEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveEventRequestValidationError{}

// Validate checks the field values on GetFromToEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFromToEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFromToEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFromToEventsRequestMultiError, or nil if none found.
func (m *GetFromToEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFromToEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetFromDate() == nil {
		err := GetFromToEventsRequestValidationError{
			field:  "FromDate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetToDate() == nil {
		err := GetFromToEventsRequestValidationError{
			field:  "ToDate",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFromToEventsRequestMultiError(errors)
	}

	return nil
}

// GetFromToEventsRequestMultiError is an error wrapping multiple validation
// errors returned by GetFromToEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFromToEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFromToEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFromToEventsRequestMultiError) AllErrors() []error { return m }

// GetFromToEventsRequestValidationError is the validation error returned by
// GetFromToEventsRequest.Validate if the designated constraints aren't met.
type GetFromToEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFromToEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFromToEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFromToEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFromToEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFromToEventsRequestValidationError) ErrorName() string {
	return "GetFromToEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFromToEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFromToEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFromToEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFromToEventsRequestValidationError{}

// Validate checks the field values on GetFromToEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFromToEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFromToEventsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFromToEventsResponseMultiError, or nil if none found.
func (m *GetFromToEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFromToEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetFromToEventsResponseValidationError{
						field:  fmt.Sprintf("EventsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetFromToEventsResponseValidationError{
						field:  fmt.Sprintf("EventsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFromToEventsResponseValidationError{
					field:  fmt.Sprintf("EventsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetFromToEventsResponseMultiError(errors)
	}

	return nil
}

// GetFromToEventsResponseMultiError is an error wrapping multiple validation
// errors returned by GetFromToEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetFromToEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFromToEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFromToEventsResponseMultiError) AllErrors() []error { return m }

// GetFromToEventsResponseValidationError is the validation error returned by
// GetFromToEventsResponse.Validate if the designated constraints aren't met.
type GetFromToEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFromToEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFromToEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFromToEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFromToEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFromToEventsResponseValidationError) ErrorName() string {
	return "GetFromToEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFromToEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFromToEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFromToEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFromToEventsResponseValidationError{}

// Validate checks the field values on GetAllEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllEventsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllEventsRequestMultiError, or nil if none found.
func (m *GetAllEventsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllEventsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetAllEventsRequestMultiError(errors)
	}

	return nil
}

// GetAllEventsRequestMultiError is an error wrapping multiple validation
// errors returned by GetAllEventsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAllEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllEventsRequestMultiError) AllErrors() []error { return m }

// GetAllEventsRequestValidationError is the validation error returned by
// GetAllEventsRequest.Validate if the designated constraints aren't met.
type GetAllEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllEventsRequestValidationError) ErrorName() string {
	return "GetAllEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEventsRequestValidationError{}

// Validate checks the field values on GetAllEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAllEventsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAllEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAllEventsResponseMultiError, or nil if none found.
func (m *GetAllEventsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAllEventsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEventsList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAllEventsResponseValidationError{
						field:  fmt.Sprintf("EventsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAllEventsResponseValidationError{
						field:  fmt.Sprintf("EventsList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAllEventsResponseValidationError{
					field:  fmt.Sprintf("EventsList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAllEventsResponseMultiError(errors)
	}

	return nil
}

// GetAllEventsResponseMultiError is an error wrapping multiple validation
// errors returned by GetAllEventsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetAllEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAllEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAllEventsResponseMultiError) AllErrors() []error { return m }

// GetAllEventsResponseValidationError is the validation error returned by
// GetAllEventsResponse.Validate if the designated constraints aren't met.
type GetAllEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAllEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAllEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAllEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAllEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAllEventsResponseValidationError) ErrorName() string {
	return "GetAllEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAllEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAllEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAllEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAllEventsResponseValidationError{}

// Validate checks the field values on EditEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditEventRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditEventRequestMultiError, or nil if none found.
func (m *EditEventRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EditEventRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := EditEventRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStartDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditEventRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditEventRequestValidationError{
					field:  "StartDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditEventRequestValidationError{
				field:  "StartDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditEventRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditEventRequestValidationError{
					field:  "EndDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditEventRequestValidationError{
				field:  "EndDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDescription()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditEventRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditEventRequestValidationError{
					field:  "Description",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDescription()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditEventRequestValidationError{
				field:  "Description",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditEventRequestMultiError(errors)
	}

	return nil
}

// EditEventRequestMultiError is an error wrapping multiple validation errors
// returned by EditEventRequest.ValidateAll() if the designated constraints
// aren't met.
type EditEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditEventRequestMultiError) AllErrors() []error { return m }

// EditEventRequestValidationError is the validation error returned by
// EditEventRequest.Validate if the designated constraints aren't met.
type EditEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditEventRequestValidationError) ErrorName() string { return "EditEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e EditEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditEventRequestValidationError{}

// Validate checks the field values on EditEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EditEventResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditEventResponseMultiError, or nil if none found.
func (m *EditEventResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EditEventResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNewEvent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditEventResponseValidationError{
					field:  "NewEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditEventResponseValidationError{
					field:  "NewEvent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNewEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditEventResponseValidationError{
				field:  "NewEvent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditEventResponseMultiError(errors)
	}

	return nil
}

// EditEventResponseMultiError is an error wrapping multiple validation errors
// returned by EditEventResponse.ValidateAll() if the designated constraints
// aren't met.
type EditEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditEventResponseMultiError) AllErrors() []error { return m }

// EditEventResponseValidationError is the validation error returned by
// EditEventResponse.Validate if the designated constraints aren't met.
type EditEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditEventResponseValidationError) ErrorName() string {
	return "EditEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EditEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditEventResponseValidationError{}
